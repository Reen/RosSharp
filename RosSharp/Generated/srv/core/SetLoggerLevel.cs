//----------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GenMsg. Version: 0.1.0.0
//     Don't change it manually.
//     2012-04-07T13:04:57+09:00
// </auto-generated>
//----------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using RosSharp.Message;
using RosSharp.Service;
namespace RosSharp.core
{
    public class SetLoggerLevel : ServiceBase<SetLoggerLevel.Request,SetLoggerLevel.Response>
    {
        public SetLoggerLevel()
        {
        }
        public SetLoggerLevel(Func<Request,Response> action)
            :base(action)
        {
        }
        public override string ServiceType
        {
            get { return "core/SetLoggerLevel"; }
        }
        public override string Md5Sum
        {
            get { return "51da076440d78ca1684d36c868df61ea"; }
        }
        public override string ServiceDefinition
        {
            get { return "string logger\nstring level---\n"; }
        }
    public class Request : IMessage
    {
        public Request()
        {
            logger = string.Empty;
            level = string.Empty;
        }
        public Request(BinaryReader br)
        {
            Deserialize(br);
        }
        public string logger { get; set; }
        public string level { get; set; }
        public string MessageType
        {
            get { return "SetLoggerLevelRequest"; }
        }
        public string Md5Sum
        {
            get { return "51da076440d78ca1684d36c868df61ea"; }
        }
        public string MessageDefinition
        {
            get { return "string logger\nstring level"; }
        }
        public void Serialize(BinaryWriter bw)
        {
            bw.WriteUtf8String(logger);
            bw.WriteUtf8String(level);
        }
        public void Deserialize(BinaryReader br)
        {
            logger = br.ReadUtf8String();
            level = br.ReadUtf8String();
        }
        public int SerializeLength
        {
            get { return 4 + logger.Length + 4 + level.Length; }
        }
        public bool Equals(Request other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return other.logger.Equals(logger) && other.level.Equals(level);
        }
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != typeof(Request)) return false;
            return Equals((Request)obj);
        }
        public override int GetHashCode()
        {
            unchecked
            {
                int result = 0;
                result = (result * 397) ^ logger.GetHashCode();
                result = (result * 397) ^ level.GetHashCode();
                return result;
            }
        }
    }
    public class Response : IMessage
    {
        public Response()
        {
        }
        public Response(BinaryReader br)
        {
            Deserialize(br);
        }
        public string MessageType
        {
            get { return "SetLoggerLevelResponse"; }
        }
        public string Md5Sum
        {
            get { return "d41d8cd98f00b204e9800998ecf8427e"; }
        }
        public string MessageDefinition
        {
            get { return ""; }
        }
        public void Serialize(BinaryWriter bw)
        {
        }
        public void Deserialize(BinaryReader br)
        {
        }
        public int SerializeLength
        {
            get { return 0; }
        }
        public bool Equals(Response other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return true;
        }
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != typeof(Response)) return false;
            return Equals((Response)obj);
        }
        public override int GetHashCode()
        {
            unchecked
            {
                int result = 0;

                return result;
            }
        }
    }
    }
}
